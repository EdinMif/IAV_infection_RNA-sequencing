###############################################################################
# RNA-seq Time Course: PPD-B challenged vs unchallenged peripheral blood      #
# paired-end reads.                                                           #
#       --- Linux bioinformatics pipeline for known sense genes ---           #
###############################################################################
# Based on the pipeline created by Nalpas, N.C. (2014) 
# DOI badge: http://dx.doi.org/10.5281/zenodo.12474
# Author of current version (4.0.0): Correia, C.N.
# DOI badge of current version:
# Last updated on: 12/05/2016

################################
# Download and files check sum #
################################

# All files have been download from MSU in 2013. At the time, they were md5sum
# checked and renamed.

# File names correspond to:
# AnimalNumber_TimePoint_AnimalGroup_PairedEndTag_LaneNumber_fastq.gz

###########################################
# FastQC quality check of raw FASTQ files #
###########################################

# Required software is FastQC v0.11.5, consult manual/tutorial
# for details: http://www.bioinformatics.babraham.ac.uk/projects/fastqc/

# Create and enter the quality check output directory:
mkdir -p $HOME/scratch/PPDbRNAseqTimeCourse/quality_check/pre-filtering
cd $HOME/scratch/PPDbRNAseqTimeCourse/quality_check/pre-filtering

# Run FastQC in one file to see if it's working well:
fastqc -o $HOME/scratch/PPDbRNAseqTimeCourse/quality_check/pre-filtering \
--noextract --nogroup -t 2 \
/workspace/storage/kmcloughlin/RNAseqTimeCourse/A6511_W10_P_R1_001.fastq.gz

### Moved this folder to my laptop using WinSCP
### and checked the HTML report. It worked fine.

# Create a bash script to perform FastQC quality check on all fastq.gz files:
for file in `find /workspace/storage/kmcloughlin/RNAseqTimeCourse/ \
-name *fastq.gz`; do echo "fastqc --noextract --nogroup -t 1 \
-o $HOME/scratch/PPDbRNAseqTimeCourse/quality_check/pre-filtering $file" \
>> fastqc.sh; done;

# Split and run all scripts on Stampede:
split -d -l 70 fastqc.sh fastqc.sh.
for script in `ls fastqc.sh.*`
do
chmod 755 $script
nohup ./$script > ${script}.nohup &
done

# Check if all the files were processed:
for file in `ls fastqc.sh.0*.nohup`; \
do more $file | grep "Failed to process file" >> failed_fastqc.txt
done

# Deleted all the HTML files:
rm -r *.html

# Check all output from FastQC:
mkdir $HOME/scratch/PPDbRNAseqTimeCourse/quality_check/pre-filtering/tmp

for file in `ls *_fastqc.zip`; do unzip \
$file -d $HOME/scratch/PPDbRNAseqTimeCourse/quality_check/pre-filtering/tmp; \
done;

for file in \
`find $HOME/scratch/PPDbRNAseqTimeCourse/quality_check/pre-filtering/tmp \
-name summary.txt`; do more $file | grep "FAIL" >> fastqc_unfiltered_fail.txt; \
done

grep -o 'Adapter Content' fastqc_unfiltered_fail.txt | wc -l
grep -o 'Kmer Content' fastqc_unfiltered_fail.txt | wc -l
grep -o 'Per tile sequence quality' fastqc_unfiltered_fail.txt | wc -l
grep -o 'Per base N content' fastqc_unfiltered_fail.txt | wc -l
grep -o 'Per base sequence content' fastqc_unfiltered_fail.txt | wc -l

for file in \
`find $HOME/scratch/PPDbRNAseqTimeCourse/quality_check/pre-filtering/tmp \
-name summary.txt`; do more $file | grep "WARN" >> fastqc_unfiltered_warn.txt; \
done

grep -o 'Per base sequence content' fastqc_unfiltered_warn.txt | wc -l
grep -o 'Adapter Content' fastqc_unfiltered_warn.txt | wc -l
grep -o 'Kmer Content' fastqc_unfiltered_warn.txt | wc -l
grep -o 'Per tile sequence quality' fastqc_unfiltered_warn.txt | wc -l
grep -o 'Per base N content' fastqc_unfiltered_warn.txt | wc -l

# Remove temporary folder and its files:
rm -rf $HOME/scratch/PPDbRNAseqTimeCourse/quality_check/pre-filtering/tmp

##################################################################
# Adapter-contamination and quality filtering of raw FASTQ files #
##################################################################

# Required software is ngsShoRT (version 2.2). More information can be found
# here: http://research.bioinformatics.udel.edu/genomics/ngsShoRT/index.html

# Create a working directory for filtered reads:
mkdir $HOME/scratch/PPDbRNAseqTimeCourse/fastq_sequence/
cd $HOME/scratch/PPDbRNAseqTimeCourse/fastq_sequence/

# Run ngsShoRT in one pair of reads to check if it's working:
perl /usr/local/src/ngsShoRT_2.2/ngsShoRT.pl -t 10 -mode trim -min_rl 100 -pe1 \
/workspace/storage/kmcloughlin/RNAseqTimeCourse/A6511_W10_P_R1_001.fastq.gz \
-pe2 /workspace/storage/kmcloughlin/RNAseqTimeCourse/A6511_W10_P_R2_001.fastq.gz \
-o $HOME/scratch/PPDbRNAseqTimeCourse/fastq_sequence/ \
-methods 5adpt_lqr -5a_f Illumina_PE_adapters.txt -5a_mp 90 -5a_del 0 \
-5a_ins 0 -5a_fmi 100 -5a_axn kr -lqs 20 -lq_p 25 -gzip

# Create shell scripts to perform filtering of each FASTQ file, keeping the
# sequencing lane information:
for file in `find /workspace/storage/kmcloughlin/RNAseqTimeCourse/ \
-name *R1_001.fastq.gz`; \
do file2=`echo $file | perl -p -e 's/R1(_00.\.fastq.gz)$/R2$1/'`; \
sample=`basename $file | perl -p -e 's/R1(_00.\.fastq.gz)$/001/'`; \
echo "perl /usr/local/src/ngsShoRT_2.2/ngsShoRT.pl -t 15 -mode trim -min_rl 100 \
-pe1 $file -pe2 $file2 \
-o $HOME/scratch/PPDbRNAseqTimeCourse/fastq_sequence/$sample \
-methods 5adpt_lqr -5a_f Illumina_PE_adapters.txt -5a_mp 90 \
-5a_del 0 -5a_ins 0 -5a_fmi 100 -5a_axn kr -lqs 20 -lq_p 25 -gzip" \
>> filtering.001.sh; done;

for file in `find /workspace/storage/kmcloughlin/RNAseqTimeCourse/ \
-name *R1_002.fastq.gz`; \
do file2=`echo $file | perl -p -e 's/R1(_00.\.fastq.gz)$/R2$1/'`; \
sample=`basename $file | perl -p -e 's/R1(_00.\.fastq.gz)$/002/'`; \
echo "perl /usr/local/src/ngsShoRT_2.2/ngsShoRT.pl -t 15 -mode trim -min_rl 100 \
-pe1 $file -pe2 $file2 \
-o $HOME/scratch/PPDbRNAseqTimeCourse/fastq_sequence/$sample \
-methods 5adpt_lqr -5a_f Illumina_PE_adapters.txt -5a_mp 90 \
-5a_del 0 -5a_ins 0 -5a_fmi 100 -5a_axn kr -lqs 20 -lq_p 25 -gzip" \
>> filtering.002.sh; done;

for file in `find /workspace/storage/kmcloughlin/RNAseqTimeCourse/ \
-name *R1_003.fastq.gz`; \
do file2=`echo $file | perl -p -e 's/R1(_00.\.fastq.gz)$/R2$1/'`; \
sample=`basename $file | perl -p -e 's/R1(_00.\.fastq.gz)$/003/'`; \
echo "perl /usr/local/src/ngsShoRT_2.2/ngsShoRT.pl -t 15 -mode trim -min_rl 100 \
-pe1 $file -pe2 $file2 \
-o $HOME/scratch/PPDbRNAseqTimeCourse/fastq_sequence/$sample \
-methods 5adpt_lqr -5a_f Illumina_PE_adapters.txt -5a_mp 90 \
-5a_del 0 -5a_ins 0 -5a_fmi 100 -5a_axn kr -lqs 20 -lq_p 25 -gzip" \
>> filtering.003.sh; done;

for file in `find /workspace/storage/kmcloughlin/RNAseqTimeCourse/ \
-name *R1_004.fastq.gz`; \
do file2=`echo $file | perl -p -e 's/R1(_00.\.fastq.gz)$/R2$1/'`; \
sample=`basename $file | perl -p -e 's/R1(_00.\.fastq.gz)$/004/'`; \
echo "perl /usr/local/src/ngsShoRT_2.2/ngsShoRT.pl -t 15 -mode trim -min_rl 100 \
-pe1 $file -pe2 $file2 \
-o $HOME/scratch/PPDbRNAseqTimeCourse/fastq_sequence/$sample \
-methods 5adpt_lqr -5a_f Illumina_PE_adapters.txt -5a_mp 90 \
-5a_del 0 -5a_ins 0 -5a_fmi 100 -5a_axn kr -lqs 20 -lq_p 25 -gzip" \
>> filtering.004.sh; done;

for file in `find /workspace/storage/kmcloughlin/RNAseqTimeCourse/ \
-name *R1_005.fastq.gz`; \
do file2=`echo $file | perl -p -e 's/R1(_00.\.fastq.gz)$/R2$1/'`; \
sample=`basename $file | perl -p -e 's/R1(_00.\.fastq.gz)$/005/'`; \
echo "perl /usr/local/src/ngsShoRT_2.2/ngsShoRT.pl -t 15 -mode trim -min_rl 100 \
-pe1 $file -pe2 $file2 \
-o $HOME/scratch/PPDbRNAseqTimeCourse/fastq_sequence/$sample \
-methods 5adpt_lqr -5a_f Illumina_PE_adapters.txt -5a_mp 90 \
-5a_del 0 -5a_ins 0 -5a_fmi 100 -5a_axn kr -lqs 20 -lq_p 25 -gzip" \
>> filtering.005.sh; done;

# Run all scripts on Stampede:
for script in `ls filtering.00*.sh`
do
chmod 755 $script
nohup ./$script > ${script}.nohup &
done











